<?xml version="1.0" encoding="utf-8"?>
<screens:AdventurePopupBase
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:components="components.*"
	xmlns:screens="screens.*"
	title="Edit Hotspot Question"
	layout="absolute" width="950" height="670"
	>
	<mx:Script>
		<![CDATA[
		import materia.CreatorBase;
		import materia.CreatorConfig;
		import materia.components.ScrollableSizableImage;

		import mx.core.UITextField;

		import tree.DisplayNode;
		import tree.Node;
		import nm.ui.ToolTip;

		import flash.external.ExternalInterface;

			use namespace mx_internal;
			private static const DEFAULT_TEXT:String = "Enter optional instructions here.";
			private static const DEFAULT_NO_TEXT:String = "No instructions provided for this image.";
			private var _layout:int;
			private var _scaleBeforeChange:Number = -1;
			private var _scaleAfterChange:Number;
			private var _changingImage:Boolean = false;
			private var refNode:Node;

			protected override function onCreationComplete():void
			{
				super.onCreationComplete();
				nodeImg.addEventListener(HotspotImage.EVENT_CHANGE_IMAGE, onChangeImageButton, false, 0, true);
				this.addEventListener(DisplayNode.EVENT_FIND_LINK, onEditLink, false, 0, true);
				/* Update Layout */
				//layoutsPanel.filters = [new GlowFilter(0, .4, 6, 6, 1)];
				// _sidePanel.addChild(sidePanelContents);

				if (!_creator.helperManager.destinationsBubble.alreadyActivated)
				{
					_creator.helperManager.addHelper(_creator.helperManager.destinationsBubble);
				}

				if (!_creator.helperManager.hotspotBubble.alreadyActivated)
				{
					_creator.helperManager.addHelper(_creator.helperManager.hotspotBubble);
				}
			}
			protected override function beginEdit(node:Node):void
			{
				super.beginEdit(node);
				/* Load Node Data (setLayout() loads image and hotspots) */
				this.title = "Edit Hotspot - " + DisplayNode.idToLabel(node.id);

				this.nodeBox.setTargetNode(node, DestinationBox.RADIUS_DEFAULT, false);
				// These were previously called from setLayout
				removeImage();
				updateImage();
				/* Load Question Text */
				qField.text = node.data.question != DEFAULT_NO_TEXT ? node.data.question : DEFAULT_TEXT;
				if(!qField.text.length) qField.text = DEFAULT_TEXT;
				updateQuestionColor();
				/* Set this node to the appropriate type */
				_node.data.addOption("type", AdventureOptions.TYPE_HOTSPOT);
				/* Set default visibility */
				// Note: This was previously VISIBILITY_HOVER, but now defaults to VISIBILITY_ALWAYS
				if(_node.data.options.visibility == null) _node.data.options.visibility = AdventureOptions.VISIBILITY_ALWAYS;

				// update reference node so answer validation can access it
				refNode = node;
			}
			protected override function onWindowClosed():void
			{
				qField.dispatchEvent(new FocusEvent(FocusEvent.FOCUS_OUT));

				if (qField.text.length && qField.text != DEFAULT_TEXT)
				{
					_layout = AdventureOptions.LAYOUT_VERT_TEXT;
					_node.data.question = qField.text;
				}
				else
				{
					_layout = AdventureOptions.LAYOUT_IMAGE_ONLY;
					_node.data.question = DEFAULT_NO_TEXT;
				}

				super.onWindowClosed();
				/* Reset the image */
				removeImage();
				/* Store modified data to node */
				_node.data.options.layout = _layout;
				/* Update the display tree */
				_tree.redraw()

				if (_creator.helperManager.destinationsBubble.visible)
				{
					_creator.helperManager.destinationsBubble.destroy();
				}

				if (_creator.helperManager.hotspotBubble.visible)
				{
					_creator.helperManager.hotspotBubble.destroy();
				}

				if (!_creator.helperManager.endSuggestionBubble.alreadyActivated)
				{
					_creator.helperManager.addHelper(_creator.helperManager.endSuggestionBubble);
				}
			}
			protected override function onEditLink(e:Event):void
			{
				this.visible = false;
				nodeImg.hideTools();
			}
			public override function onDoneEditingLink():void
			{
				this.visible = true;
				nodeImg.showTools();
			}
			public override function destroy():void
			{
				super.destroy();
				if(nodeImg != null) nodeImg.removeEventListener(HotspotImage.EVENT_CHANGE_IMAGE, onChangeImageButton);
				this.removeEventListener(DisplayNode.EVENT_FIND_LINK, onEditLink);
			}
			private function removeImage():void
			{
				_changingImage = false;
				nodeImg.removeEventListener(ScrollableSizableImage.EVENT_IMAGE_LOAD_COMPLETE, onLoadImageComplete);
				nodeImg.source = "";
				nodeImg.hideTools();
				nodeImg.endRedrawHotspotMode(false);
				nodeImg.removeHotspots();
			}
			private function updateQuestionColor():void
			{
				qField.setStyle("color", qField.text == DEFAULT_TEXT ? "#a5a5a5" : "#505050");
			}

			public function selectImage():void
			{
				CreatorBase.openMediaScreen(onMediaLoaded);
			}
			protected function onMediaLoaded(assetArr:Array):void
			{
				if(assetArr.length > 0)
				{
					// Delete all hotspots
//					_node.displayNode.displayTree.resetHotspotNode(_node);
					// Keep track of old image's scale
					_scaleBeforeChange = nodeImg.imageScale;
					// Load Image
					_node.data.options.asset = { materiaType:'asset,', id:assetArr[0].id };
					updateImage();
				}
				else
				{
					_changingImage = false;
				}
				stage.focus = this;
			}
			private function onChangeImageButton(e:Event):void
			{
				_changingImage = true;
				selectImage();
			}
			private function updateImage():void
			{
				/* Remove hotspots left over from last loaded image */
				if(!_changingImage) nodeImg.removeHotspots();

				/* If the node has an image assigned to it, place that image */
				if(_node.data.options.asset && _node.data.options.asset.id && _node.data.options.asset.id != "")
				{
					/* Wait until this image is loaded and adjust the scale or reposition */
					nodeImg.addEventListener(ScrollableSizableImage.EVENT_IMAGE_LOAD_COMPLETE, onLoadImageComplete, false, 0, true);
					/* Load the image */
					nodeImg.source = CreatorConfig.getKogneatoAssetLink(_node.data.options.asset.id);
					/* Hide the placeholder, show the image */
					placeholderImg.visible = false;
					nodeImg.visible = true;
				}
				/* If no image is stored, show the placeholder */
				else
				{
					placeholderImg.visible = true;
					nodeImg.visible = false;
					nodeImg.source = null;
				}
			}
			private function onLoadImageComplete(event:Event):void
			{
				// Remove the event listener
				nodeImg.removeEventListener(ScrollableSizableImage.EVENT_IMAGE_LOAD_COMPLETE, onLoadImageComplete);
				// Auto-fit
				nodeImg.scaleToFit();
				// If image was changed, update the scales of all the hotspots
				if(_changingImage) nodeImg.updateHotspotScales(_scaleBeforeChange, nodeImg.imageScale);
				// Show the toolbar
				nodeImg.hideTools();
				nodeImg.showTools();
				// Load any stored hotspots
				if(!_changingImage) nodeImg.loadHotspots();
				// Reset the Changing Image Flag
				_changingImage = false;
				_scaleBeforeChange = -1;
			}
			private function addNode(parentNode:Node):Node
			{
				var result:Node = parentNode.displayNode.displayTree.addNode(parentNode, null).node;
				_newNodes.push(result);
				return result;
			}

			public override function hide():void
			{
				if (!visible) return;
				onWindowClosed();
			}
			/*
			private function validateAnswerScoreSelections():Boolean
			{
				for (var i:int = 0; i < refNode.data.answers.length; i++)
				{
					var opts:Object = refNode.data.answers[i].options;
					if ((opts.validScore != undefined && !opts.validScore == true)
					|| (opts.validScoreModification != undefined && !opts.validScoreModification == true))
					{
						doneButton.addEventListener(MouseEvent.MOUSE_OVER, clearDoneToolTip);
						return false;
					}
				}

				return true;
			}

			private function clearDoneToolTip(e:Event):void
			{
				ToolTip.remove(doneButton);
				doneButton.removeEventListener(MouseEvent.MOUSE_OVER, clearDoneToolTip);
			}
			*/

		]]>
	</mx:Script>
	<mx:VBox id="mainVBox" top="{PADDING_V}" bottom="{PADDING_V + 50}" verticalGap="{PADDING_V}" width="100%" paddingLeft="{PADDING_H}" paddingRight="{PADDING_H}">
			<!-- Title, Text, Button -->
			<mx:Canvas id="fieldCanvas" styleName="fieldCanvas" width="100%">
			 	<!-- Contains the Icon and Question -->
				<mx:HBox top="30" bottom="20" left="10" right="20" horizontalGap="20">
					<components:DestinationBox id="nodeBox" minWidth="75" height="75"/>
					<mx:TextArea styleName="smallerField" id="qField" text="{DEFAULT_TEXT}" width="100%" height="100%"
								 focusIn="{
									 if(qField.text == DEFAULT_TEXT || !qField.text.length) {
										 qField.text = '';
										 updateQuestionColor();
									 }
								 }"
								 focusOut="{
									 if(!qField.text.length) {
										 qField.text = DEFAULT_TEXT;
										 updateQuestionColor();
									 }
								 }"
								 />
				</mx:HBox>
			</mx:Canvas>
		<mx:Canvas id="imageContainer" borderStyle="solid" borderColor="0xbfbfbf" backgroundColor="0xffffff" height="100%" width="100%">
			<mx:Image id="placeholderImg" click="{selectImage();}" source="@Embed(source='../assets/image_icon.png')" verticalCenter="0" horizontalCenter="0" />
			<components:HotspotImage id="nodeImg" node="{_node}" visible="false" addNodeFunction="addNode" click="{nodeImg.showTools();}" verticalCenter="0" horizontalCenter="0" top="5" right="5" bottom="5" left="5"/>
		</mx:Canvas>
	</mx:VBox>
	<components:AdventureButton id="doneButton" bottom="20" right="20" label="Done" click="{hide();}" />
</screens:AdventurePopupBase>