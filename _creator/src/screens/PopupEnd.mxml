<?xml version="1.0" encoding="utf-8"?>
<screens:PopupNarrative
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:components="components.*"
	xmlns:screens="screens.*"
	>
	<mx:Script>
	<![CDATA[
	import components.PercentField;
	import tree.Node;
	import mx.containers.VBox;
	import mx.controls.Label;
	import mx.core.UIComponent;
	private static const TEXTFORMAT_INPUT:TextFormat = new TextFormat("Arial", 30, '0', false, null, null, null, null, "left");
	private static const COLOR_GRAY:Number = 0x555555;
	private static const COLOR_BLACK:Number = 0x0;
	private static const DEFAULT_SCORE:int = 100;
	private var _scoreVBox:VBox;
	private var _scoreInputLabel:Label;
	private var _scoreInputContainer:UIComponent;
	private var _scoreInput:PercentField;
	private var _reverting:Boolean = false;
	protected override function fixImportedData(node:Node):void
	{
		super.fixImportedData(node);
		/* remove any answers */
		while(_node.data.answers.length > 0)
		{
			_node.data.answers.pop();
		}
		/* revoke "new" status */
		_node.isNew = false;
		_node.imported = false;
	}
	//------------------------------------------------------------------
	//
	//  Semi-Constrctor
	//
	//------------------------------------------------------------------
	protected override function onCreationComplete():void
	{
		super.onCreationComplete();
		/* initialize container for score items */
		_scoreVBox = new VBox();
		_scoreVBox.setStyle("verticalGap", 4);
		layoutCol.addChild(_scoreVBox);
		/* initialize label for score input field */
		_scoreInputLabel = new Label();
		_scoreInputLabel.styleName = "sidePanelLabel";
		_scoreInputLabel.text = "Final Score:";
		_scoreVBox.addChild(_scoreInputLabel);
		/* initialize score input field */
		_scoreInputContainer = new UIComponent();
		_scoreInput = new PercentField();
		_scoreInput.height = 40;
		_scoreInput.defaultTextFormat = TEXTFORMAT_INPUT;
		_scoreInput.setTextFormat(TEXTFORMAT_INPUT);
		_scoreInput.setValue(100);
		_scoreInput.background = true;
		_scoreInput.backgroundColor = 0xfeffd1;
		_scoreInput.addEventListener(PercentField.EVENT_COMMIT, updateValue, false, 0, true);
		_scoreInputContainer.addChild(_scoreInput);
		_scoreVBox.addChild(_scoreInputContainer);
	}
	//------------------------------------------------------------------
	//
	//  Instance Functions
	//
	//------------------------------------------------------------------
	public override function destroy():void
	{
		super.destroy();
		if(_scoreInput != null) _scoreInput.destroy();
	}
	protected override function beginEdit(node:Node):void
	{
		/* mark node as not new so child doesn't get automatically added on super */
		var tempIsNew:Boolean = node.isNew;
		node.isNew = false;
		/* call super */
		super.beginEdit(node);
		/* restore node's new status */
		node.isNew = tempIsNew;
		/* set the title */
		this.title = "Edit End Destination - " + _nodeID;
		/* remove destination box */
		if(destHolder.parent != null) destHolder.parent.removeChild(destHolder);
		/* update score box only if in destination mode */
		_scoreVBox.visible = true;
		if(_node.data.options.finalScore != null)
		{
			_scoreInput.setValue(_node.data.options.finalScore);
		}
		else
		{
			_scoreInput.setValue(DEFAULT_SCORE);
			_node.data.options.finalScore = DEFAULT_SCORE;
		}

		/* set this node to the appropriate type */
		_node.data.addOption("type", AdventureOptions.TYPE_END);
	}
	private function updateValue(e:Event):void
	{
		_node.data.options.finalScore = _scoreInput.getNumberValue();
	}
	]]>
	</mx:Script>
</screens:PopupNarrative>