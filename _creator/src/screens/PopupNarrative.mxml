<?xml version="1.0" encoding="utf-8"?>
<screens:AdventurePopupBase
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:components="components.*"
	layout="absolute" width="980" height="740"
	xmlns:screens="screens.*">
	<mx:Script>
		<![CDATA[
		import materia.CreatorBase;
		import materia.CreatorConfig;
			import materia.components.ScrollableSizableImage;
			import tree.DisplayTree;
			use namespace mx_internal;
			import components.FloatButton;
			import components.bubbles.DestinationBubble;
			import tree.DisplayNode;
			import tree.Node;
			import flash.events.MouseEvent;
			import mx.controls.TextInput;
			import mx.core.UITextField;
			import mx.events.FlexEvent;
			//--------------------------------------------------------------------------
			//
			//  Class constants
			//
			//--------------------------------------------------------------------------
			private static const DEFAULT_TEXT:String = "Enter text here.";
			private static const DEFAULT_PROCEED_TEXT:String = "Continue";
			private static const TEXT_ONLY:int = AdventureOptions.LAYOUT_TEXT_ONLY;
			private static const HORIZONTAL_LEFT_TEXT:int = AdventureOptions.LAYOUT_HORIZ_TEXT;
			private static const HORIZONTAL_RIGHT_TEXT:int = AdventureOptions.LAYOUT_HORIZ_IMAGE;
			private static const VERTICAL_TOP_TEXT:int = AdventureOptions.LAYOUT_VERT_TEXT;
			private static const VERTICAL_BOTTOM_TEXT:int = AdventureOptions.LAYOUT_VERT_IMAGE;
			private static const NODE_BOX_RADIUS:Number = 30;
			//--------------------------------------------------------------------------
			//
			//  Instance Variables
			//
			//--------------------------------------------------------------------------
			[Bindable]
			protected var _nodeID:String;
			[Bindable]
			private var _proceedText:String;
			private var _layout:int;
			[Embed(source="../assets/image_icon.png")]
			private static var AddImageIcon:Class;
			[Bindable]
			private var _destination:Node;
			[Bindable]
			private var _destText:String;
			//--------------------------------------------------------------------------
			//
			//  Instance Functions
			//
			//--------------------------------------------------------------------------
			protected override function onCreationComplete():void
			{
				super.onCreationComplete();
				updateDestinationBox();
				this.addEventListener(DisplayNode.EVENT_FIND_LINK, onEditLink, false, 0, true);
				this.addEventListener(DestinationBubble.EVENT_DESTINATION_CHOICE, onDestChange, false, 0, true);
				_sidePanel.addChild(layoutCol);
			}
			protected override function fixImportedData(node:Node):void
			{
				super.fixImportedData(node);
				// TODO: fix inheritance issues (hack fix)
				if(!(this is PopupEnd))
				{
					var newNode:Node = addNode(_node);
					/* remove excess answers */
					while(_node.data.answers.length > 1)
					{
						_node.data.answers.pop();
					}
					/* add an answer if non existed */
					if(_node.data.answers.length == 0)
					{
						_node.data.addAnswer(DEFAULT_PROCEED_TEXT, "0");
					}
					/* link answer to next node */
					_node.data.answers[0].options.link = newNode.id;
					/* add answer text to continue button */
					// _node.data.options.proceedText = _node.data.answers[0].text;
					/* revoke "new" status */
					_node.isNew = false;
					_node.imported = false;
				}
			}
			protected override function beginEdit(node:Node):void
			{
				super.beginEdit(node);
				/* Add a child if it's a new node */
				if(_node.isNew)
				{
					var newNode:Node
					if(_node.children.length == 0) newNode = addNode(_node);
					else if(_node.data.answers.length == 0) newNode = _node.children[0];
					_node.data.addAnswer("", "0", {link:newNode.id});
					_newNodes.push(newNode);
				}
				this.destination = _node.children.length? _node.children[0] : null;
				this.nodeBox.setTargetNode(node, DestinationBox.RADIUS_DEFAULT, false);
				_nodeID = DisplayNode.idToLabel(node.id);
				this.title = "Edit Narration - " + _nodeID;
				/* Load Question Text */
				qField.text = node.data.question;
				if(!qField.text.length) qField.text = DEFAULT_TEXT;
				updateQuestionColor();
				/* Load Proceed Text */
				if(node.data.options.proceedText != null && node.data.options.proceedText.length) _proceedText = node.data.options.proceedText;
				else _proceedText = DEFAULT_PROCEED_TEXT;
				proceedInput.text = _proceedText;
				// draw the proceed button's instruction tooltip
				labelChangeTip.graphics.beginFill(0xFEF6B1);
				labelChangeTip.graphics.drawRoundRect(0,0,234,33, 5, 5);
				labelChangeTip.graphics.endFill();
				labelChangeTip.graphics.beginFill(0xFEF6B1);
				labelChangeTip.graphics.moveTo(230,0);
				labelChangeTip.graphics.lineTo(234,0);
				labelChangeTip.graphics.lineTo(250,17);
				labelChangeTip.graphics.lineTo(234,33);
				labelChangeTip.graphics.lineTo(230,33);
				labelChangeTip.graphics.lineTo(230,0);
				labelChangeTip.graphics.endFill();
				nodeImg.addEventListener(ScrollableSizableImage.EVENT_IMAGE_LOAD_COMPLETE, onImageLoadComplete, false, 0, true);
				setLayout(node.data.options.layout);
				// Set this node to the appropriate type
				_node.data.addOption("type", AdventureOptions.TYPE_NARRATIVE);
			}
			private function onImageLoadComplete(e:Event):void
			{
				 nodeImg.removeEventListener(ScrollableSizableImage.EVENT_IMAGE_LOAD_COMPLETE, onImageLoadComplete);
				 //repositionStart();
				callLater(readjust);
			}
			private function repositionStart():void
			{
				nodeImg.allowScrollingAndSizing = true;
				nodeImg.storeCurrentImageSize();
			}
			public override function onDoneEditingLink():void
			{
				this.visible = true;
				_destText = DisplayNode.idToLabel(_node.data.answers[0].options.link);
				updateDestinationBox();
			}
			protected override function onEditLink(e:Event):void
			{
				this.visible = false;
			}
			private function updateQuestionColor():void
			{
				qField.setStyle("color", qField.text == DEFAULT_TEXT ? "#a5a5a5" : "#505050");
			}
			protected override function onWindowClosed():void
			{
				super.onWindowClosed();
				if(!_node.data.options.assetId)
				{
					_node.data.options.layout = TEXT_ONLY;
				}
				else
				{
					_node.data.options.layout = _layout;
				}
				/* unload assets */
				nodeImg.source = "";
				/* Save the Question */
				if(qField.text != DEFAULT_TEXT) _node.data.question = qField.text;
				else _node.data.question = "";
				_node.data.options.id = _node.id;
				if(_proceedText == '') _proceedText = DEFAULT_PROCEED_TEXT;
				_node.data.options.proceedText = _proceedText;
				if(_node.data.answers.length) _node.data.answers[0].text = _proceedText;
				/* Update position if necessary */
				_tree.redraw();

				if (!_creator.helperManager.endSuggestionBubble.alreadyActivated)
				{
					_creator.helperManager.addHelper(_creator.helperManager.endSuggestionBubble);
				}
			}
			private function addNode(parentNode:Node):Node
			{
				return _tree.addNode(parentNode, null).node;
			}
			private function changeLayout(layout:int):void
			{
				if(_node)
				{
					_node.data.options.layout = layout;
				}
				setLayout(layout);
			}
			private function setButtonAppearance(t1:Canvas):void
			{
				var len:int = layoutButtons.numChildren;
				for(var a:int = 0; a < len; a++)
				{
					var tar:Canvas = Canvas(layoutButtons.getChildAt(a));
					if(tar == t1)
					{
						tar.setStyle('borderStyle', 'solid');
						tar.getChildAt(1).visible = true;
					}
					else
					{
						tar.setStyle('borderStyle', 'none');
						tar.getChildAt(1).visible = false;
					}
				}
			}
			private function setLayout(layout:int):void
			{
				_layout = layout;
				var textOnly:Boolean = false;
				var scale:Boolean = true;
				switch(layout)
				{
					case HORIZONTAL_LEFT_TEXT:
					{
						currentState = "horizontal1";
						setButtonAppearance(H1);
						break;
					}
					case HORIZONTAL_RIGHT_TEXT:
					{
						currentState = "horizontal2";
						setButtonAppearance(H2);
						break;
					}
					case VERTICAL_TOP_TEXT:
					{
						currentState = "vertical1";
						setButtonAppearance(V1);
						break;
					}
					case VERTICAL_BOTTOM_TEXT:
					{
						currentState = "vertical2";
						setButtonAppearance(V2);
						break;
					}
					default:
					{
						currentState = "single";
						textOnly = true;
						break;
					}
				}
				switch(currentState)
				{
					case "horizontal1":
					{
						if(vPanel2.parent == null)
						{
							vPanel1.parent.addChild(vPanel2);
						}
						addDeleteButton(vPanel2, false);
						break;
					}
					case "horizontal2":
					{
						if(vPanel1.parent == null)
						{
							vPanel2.parent.addChildAt(vPanel1, 0);
						}
						addDeleteButton(vPanel1, true);
						break;
					}
					case "vertical1":
					{
						if(hPanel2.parent == null)
						{
							hPanel1.parent.addChild(hPanel2);
						}
						addDeleteButton(hPanel2, false);
						break;
					}
					case "vertical2":
					{
						if(hPanel1.parent == null)
						{
							hPanel2.parent.addChildAt(hPanel1, 0);
						}
						addDeleteButton(hPanel1, false);
						break;
					}
				}
				//remove the 'add image' button, replace it with the layout selection menu
				if(layoutsWindow.parent == null && !textOnly)
				{
					if(addImageButton.parent)
					{
						layoutCol.addChildAt(layoutsWindow,layoutCol.getChildIndex(addImageButton));
						layoutCol.removeChild(addImageButton);
					}
				}
				//if the node has an image assigned to it, place that image
				if(_node.data.options.assetId)
				{
					nodeImg.source = CreatorConfig.getKogneatoAssetLink(_node.data.options.assetId);
					if(nodeImgHolder.parent != null)
					{
						if(!nodeImg.loaded)
						{
							nodeImg.addEventListener(FlexEvent.UPDATE_COMPLETE, function t(e:Event):void {
								EventDispatcher(e.currentTarget).removeEventListener(e.type, arguments.callee);
								addChangeImgButton();
							}, false, 0, true);
						}
						else
						{
							addChangeImgButton();
						}
					}
				}
				//otherwise add the placeholder for user to click to add image
				else
				{
					//placeholder; replace this with pre-add image
					nodeImg.source = new AddImageIcon();
					scale = false;
					if(!nodeImgHolder.hasEventListener(MouseEvent.CLICK))
					{
						nodeImgHolder.buttonMode = true;
						nodeImgHolder.addEventListener(MouseEvent.CLICK, giveNodeImage);
					}
				}
				if(nodeImg.displayedImage)
				{
					callLater(readjust, [scale]);
				}
			}
			private function readjust(scale:Boolean = true):void
			{
				if(scale)nodeImg.scaleToFit();
				else nodeImg.centerImage();
//				changeImgBtn.reposition(nodeImg.displayedImage);
			}
			private function ensureState(s:String):void
			{
				switch(s)
				{
					case "horizontal1":
					{
						setLayout(HORIZONTAL_LEFT_TEXT);
						break;
					}
					case "horizontal2":
					{
						setLayout(HORIZONTAL_RIGHT_TEXT);
						break;
					}
					case "vertical1":
					{
						setLayout(VERTICAL_TOP_TEXT);
						break;
					}
					case "vertical2":
					{
						setLayout(VERTICAL_BOTTOM_TEXT);
						break;
					}
					default:
					{
						setLayout(1);
						break;
					}
				}
			}
			private function addDeleteButton(target:*, leftSide:Boolean = false):void
			{
				addChild(deleteImgBtn);
				var point:Point = deleteImgBtn.parent.globalToLocal(target.localToGlobal(new Point(0, 0)));
				deleteImgBtn.x = point.x + AdventureButton.ANCHOR_PADDING;
				deleteImgBtn.y = point.y + target.height - getStyle("headerHeight") + AdventureButton.ANCHOR_PADDING;
			}
			private function addChangeImgButton():void
			{
				if(nodeImgHolder.hasEventListener(MouseEvent.CLICK))
				{
					nodeImgHolder.buttonMode = false;
					nodeImgHolder.removeEventListener(MouseEvent.CLICK, giveNodeImage);
				}
				changeImgBtn.visible = true;
				addChild(changeImgBtn);
				changeImgBtn.x = deleteImgBtn.x + deleteImgBtn.width + AdventureButton.ANCHOR_PADDING * 2 + 10;
				changeImgBtn.y = deleteImgBtn.y;
				changeImgBtn.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDownInside, false, 0, true);
			}
			private function removeImageZone():void
			{
				removeChild(deleteImgBtn);
				if(changeImgBtn.visible)
				{
					changeImgBtn.visible = false;
					removeChild(changeImgBtn);
				}
				changeImgBtn.removeEventListener(MouseEvent.MOUSE_DOWN, onMouseDownInside);
				nodeImgHolder.parent.parent.removeChild(nodeImgHolder.parent);
				_node.data.options.assetId = null;
				layoutCol.addChildAt(addImageButton, layoutCol.getChildIndex(layoutsWindow));
//				layoutCol.removeChild(layoutsWindow);
				currentState = "single";
				_node.data.options.layout = TEXT_ONLY;
			}
			protected function onMouseDownInside(e:Event):void
			{
				e.stopPropagation();
			}
			private function proceedTextInput():void
			{
				if(proceedInput.parent == null)
				{
					proceedButton.removeChild(proceedLabel);
					proceedButton.addChild(proceedInput);
					proceedInput.setFocus();
					proceedInput.addEventListener(FocusEvent.FOCUS_OUT, preChangeProceedLabel);
					proceedButton.mouseChildren = true;
				}
			}
			private function preChangeProceedLabel(event:FocusEvent):void
			{
				changeProceedLabel();
			}
			private function changeProceedLabel():void
			{
				if(proceedInput.parent != null)
				{
					if(proceedInput.text != "")
					{
						if(_node.data.answers.length) _node.data.answers[0].text = proceedInput.text;
						_node.data.options.proceedText = proceedInput.text;
						_proceedText = _node.data.options.proceedText;
					}
					proceedButton.removeChild(proceedInput);
					proceedButton.addChild(proceedLabel);
					proceedButton.mouseChildren = false;
					proceedInput.removeEventListener(FocusEvent.FOCUS_OUT, preChangeProceedLabel);
				}
			}
			private function giveNodeImage(e:Event = null):void
			{
			 	CreatorBase.openMediaScreen(onMediaLoaded);
			}
			protected function onMediaLoaded(assets:Array):void
			{
				if(assets.length > 0)
				{
					_node.data.options.assetId = assets[0].id;
					nodeImg.source = CreatorConfig.getKogneatoAssetLink(assets[0].id);
					addChangeImgButton();
				}
			}
			private function onDestClick():void
			{
				var bubble:DestinationBubble = new DestinationBubble(this, "right", false);
				bubble.show(destCanvas);
			}
			private function onDestChange(e:DataEvent):void
			{
				//trace("onDestChange " + e.data + "  " + int(e.data));
				trace("onDestChange: " + e.data);
				var result:int = int(e.data);
				// If the target node didn't exist (was in warning state), create it first
				if(_node.children.length == 0)
				{
					var displayTree:DisplayTree = _node.displayNode.displayTree;
					// create the missing node
					destination = displayTree.addNode(_node, null).node;
					_node.data.addAnswer("", "0");
				}
				switch(result) {
					case DestinationBubble.NEW_NODE:
						//trace("New");
						this.destination = _node.children[0];
						_node.displayNode.displayTree.setLink(_node.children[0], _node.children[0]);
						onDoneEditingLink();
						break;
					case DestinationBubble.EXISTING_NODE:
						//trace("Existing");
						dispatchEvent(new DataEvent(DisplayNode.EVENT_FIND_LINK, true, false, String(_node.children[0].id)));
						break;
				}
			}
			public function get destination():Node { return _destination; }
			public function set destination(val:Node):void
			{
				_destination = val;
				updateDestinationBox();
			}
			private function updateDestinationBox():void
			{
				if(destCanvas != null) destCanvas.setTargetNode(_destination, NODE_BOX_RADIUS);
			}
		]]>
	</mx:Script>
	<!-- Layout Column - relocated to sidePanel on creationComplete -->
	<mx:VBox id="layoutCol" verticalGap="{PADDING_V * 2}" width="90" clipContent="false">
		<mx:VBox id="metaVBox" verticalGap="0" width="100%">
			<components:DestinationBox id="nodeBox" minWidth="75" height="75"/>
			<mx:Spacer height="10" />
		</mx:VBox>
		<mx:Canvas id="layoutsWindow" backgroundColor="0x7299b5" width="80" height="230">
			<mx:Label fontFamily="Arial MT Bold" fontSize="12" color="0xffffff" text="Layouts:" top="1" horizontalCenter="0" />
			<mx:VBox id="layoutButtons" backgroundColor="0xffffff" width="78" height="209" left="1" top="20"
					 verticalGap="4" horizontalAlign="center" verticalAlign="middle">
				<mx:Canvas id="H1" styleName="layoutCanvas" click="changeLayout(HORIZONTAL_LEFT_TEXT);">
					<mx:Image source="@Embed(source='../assets/narrativeLayout1.png')" verticalCenter="0" horizontalCenter="0" />
					<mx:Container id="H1Overlay" width="100%" height="100%" visible="false" backgroundColor="0x7299b5" alpha="0.09" />
				</mx:Canvas>
				<mx:Canvas id="H2" styleName="layoutCanvas" click="changeLayout(HORIZONTAL_RIGHT_TEXT);">
					<mx:Image source="@Embed(source='../assets/narrativeLayout2.png')" verticalCenter="0" horizontalCenter="0" />
					<mx:Container id="H2Overlay" width="100%" height="100%" visible="false" backgroundColor="0x7299b5" alpha="0.09" />
				</mx:Canvas>
				<mx:Canvas id="V1" styleName="layoutCanvas" click="changeLayout(VERTICAL_TOP_TEXT);">
					<mx:Image source="@Embed(source='../assets/narrativeLayout3.png')" verticalCenter="0" horizontalCenter="0" />
					<mx:Container id="V1Overlay" width="100%" height="100%" visible="false" backgroundColor="0x7299b5" alpha="0.09" />
				</mx:Canvas>
				<mx:Canvas id="V2" styleName="layoutCanvas" click="changeLayout(VERTICAL_BOTTOM_TEXT);">
					<mx:Image source="@Embed(source='../assets/narrativeLayout4.png')" verticalCenter="0" horizontalCenter="0" />
					<mx:Container id="V2Overlay" width="100%" height="100%" visible="false" backgroundColor="0x7299b5" alpha="0.09" />
				</mx:Canvas>
			</mx:VBox>
			<mx:filters>
				<mx:DropShadowFilter color="#000000" distance="4" angle="90" blurX="8" blurY="6" alpha=".25" />
			</mx:filters>
		</mx:Canvas>
		<mx:VBox id="destHolder" width="90" height="100%" horizontalAlign="center" paddingRight="13">
			<mx:Text styleName="greyText" width="100%" textAlign="center" selectable="false" text="Destination:" />
			<components:DestinationBox id="destCanvas" minWidth="70" height="75" click="onDestClick()" />
		</mx:VBox>
	</mx:VBox> <!-- #layoutCol -->
	<!-- BEGIN the rest of content -->
	<mx:VBox paddingLeft="{LEFT_BOUNDARY}" width="100%" height="100%" verticalGap="16">
		<mx:HBox id="mainHBox" paddingTop="30" paddingLeft="23" width="100%" height="100%">
		</mx:HBox>
		<mx:HBox horizontalAlign="center" visible="false" verticalAlign="middle" width="100%" height="100%">
			<mx:Canvas id="labelChangeTip" width="250" height="33">
				<mx:Label id="lctipLabel" fontSize="12" text="Click on the button to change its label."
						  color="#57543C" fontWeight="bold"
						  x="{(labelChangeTip.width-lctipLabel.width)/2}"
						  y="{(labelChangeTip.height-lctipLabel.height)/2}"/>
				<mx:filters>
					<mx:DropShadowFilter angle="90" distance="1" blurX="0" blurY="0" alpha=".5"/>
				</mx:filters>
			</mx:Canvas>
			<mx:Canvas id="proceedButton" width="180" height="60" backgroundColor="#7299B5"
					   mouseChildren="false" buttonMode="true" click="proceedTextInput();" horizontalScrollPolicy="off">
				<mx:Text color="#FFFFFF" fontSize="18" id="proceedLabel" text="{_proceedText}"
						  x="{(proceedButton.width-proceedLabel.width)/2}"
						  y="{(proceedButton.height-proceedLabel.height)/2}"/>
			</mx:Canvas>
		</mx:HBox>
	</mx:VBox>
	<mx:HBox id="hMainContainer" width="810" height="600" horizontalGap="30" move="ensureState(currentState);">
		<mx:VBox id="vPanel1" width="100%" height="100%" styleName="fieldCanvas"
				 horizontalAlign="center" verticalAlign="middle" verticalGap="5" />
		<mx:VBox id="vPanel2" width="100%" height="100%" styleName="fieldCanvas"
				 horizontalAlign="center" verticalAlign="middle" verticalGap="5" />
	</mx:HBox>
	<mx:VBox id="vMainContainer" width="810" height="600" verticalGap="30" move="ensureState(currentState);">
		<mx:HBox id="hPanel1" width="100%" height="100%" styleName="fieldCanvas"
				 horizontalAlign="center" verticalAlign="middle" verticalGap="5" />
		<mx:HBox id="hPanel2" width="100%" height="100%" styleName="fieldCanvas"
				 horizontalAlign="center" verticalAlign="middle" verticalGap="5" />
	</mx:VBox>
	<mx:TextArea borderSides="" styleName="field" id="qField" text="{DEFAULT_TEXT}" width="100%" height="100%"
				 focusIn="{
					 if(qField.text == DEFAULT_TEXT){
						 qField.text = '';
						 updateQuestionColor();
						 }
					 }"
				 focusOut="{
					 if(!qField.text.length){
						 qField.text = DEFAULT_TEXT;
						 updateQuestionColor();
					 }
				 }"
	/>
	<components:AdventureButton id="deleteImgBtn" anchored="true" label="Remove" click="removeImageZone();" />
	<components:AdventureButton id="changeImgBtn" visible="false" anchored="true" label="Change Image" click="giveNodeImage();" />
	<components:AdventureButton id="addImageButton" usePlus="true" label="Add&#13;Image"
								click="setLayout(HORIZONTAL_LEFT_TEXT);"
								width="90" height="60"/>
	<mx:Canvas id="nodeImgHolder" width="100%" height="100%" verticalCenter="0" horizontalCenter="0">
		<components:AdventureImage id="nodeImg" width="100%" height="100%"
								   repositionDone="nodeImg.centerImage();"/>
	</mx:Canvas>
	<mx:TextInput id="proceedInput" x="5" y="{proceedLabel.y}"
				  width="{proceedButton.width-10}" height="{proceedLabel.height}"
				  enter="changeProceedLabel();" />
	<screens:states>
		<mx:State name="single">
			<mx:RemoveChild target="{vMainContainer}" />
			<mx:RemoveChild target="{hMainContainer}" />
			<mx:AddChild relativeTo="{mainHBox}" target="{hMainContainer}"/>
			<mx:RemoveChild target="{qField}" />
			<mx:AddChild relativeTo="{vPanel1}" target="{qField}"/>
			<mx:RemoveChild target="{addImageButton}" />
			<mx:RemoveChild target="{nodeImgHolder}" />
			<mx:RemoveChild target="{vPanel1}" />
			<mx:AddChild relativeTo="{hMainContainer}" target="{vPanel1}"/>
			<mx:RemoveChild target="{vPanel2}" />
			<mx:RemoveChild target="{deleteImgBtn}" />
			<mx:RemoveChild target="{changeImgBtn}" />
			<mx:RemoveChild target="{proceedInput}" />
			<mx:AddChild relativeTo="{layoutsWindow}" target="{addImageButton}" position="after"/>
			<mx:RemoveChild target="{layoutsWindow}" />
		</mx:State>
		<mx:State name="horizontal1">
			<mx:RemoveChild target="{vMainContainer}" />
			<mx:RemoveChild target="{hMainContainer}" />
			<mx:AddChild relativeTo="{mainHBox}" target="{hMainContainer}"/>
			<mx:RemoveChild target="{qField}" />
			<mx:AddChild relativeTo="{vPanel1}" target="{qField}"/>
			<mx:RemoveChild target="{addImageButton}" />
			<mx:RemoveChild target="{nodeImgHolder}" />
			<mx:AddChild relativeTo="{vPanel2}" target="{nodeImgHolder}"/>
			<mx:RemoveChild target="{vPanel1}" />
			<mx:AddChild relativeTo="{hMainContainer}" target="{vPanel1}"/>
			<mx:RemoveChild target="{vPanel2}" />
			<mx:AddChild relativeTo="{hMainContainer}" target="{vPanel2}"/>
			<mx:RemoveChild target="{deleteImgBtn}" />
			<mx:RemoveChild target="{changeImgBtn}" />
			<mx:RemoveChild target="{proceedInput}" />
		</mx:State>
		<mx:State name="horizontal2">
			<mx:RemoveChild target="{vMainContainer}" />
			<mx:RemoveChild target="{hMainContainer}" />
			<mx:AddChild relativeTo="{mainHBox}" target="{hMainContainer}"/>
			<mx:RemoveChild target="{qField}" />
			<mx:AddChild relativeTo="{vPanel2}" target="{qField}"/>
			<mx:RemoveChild target="{addImageButton}" />
			<mx:RemoveChild target="{nodeImgHolder}" />
			<mx:AddChild relativeTo="{vPanel1}" target="{nodeImgHolder}"/>
			<mx:RemoveChild target="{vPanel1}" />
			<mx:AddChild relativeTo="{hMainContainer}" target="{vPanel1}"/>
			<mx:RemoveChild target="{vPanel2}" />
			<mx:AddChild relativeTo="{hMainContainer}" target="{vPanel2}"/>
			<mx:RemoveChild target="{deleteImgBtn}" />
			<mx:RemoveChild target="{changeImgBtn}" />
			<mx:RemoveChild target="{proceedInput}" />
		</mx:State>
		<mx:State name="vertical1">
			<mx:RemoveChild target="{hMainContainer}" />
			<mx:RemoveChild target="{vMainContainer}" />
			<mx:AddChild relativeTo="{mainHBox}" target="{vMainContainer}"/>
			<mx:RemoveChild target="{qField}" />
			<mx:AddChild relativeTo="{hPanel1}" target="{qField}"/>
			<mx:RemoveChild target="{addImageButton}" />
			<mx:RemoveChild target="{nodeImgHolder}" />
			<mx:AddChild relativeTo="{hPanel2}" target="{nodeImgHolder}"/>
			<mx:RemoveChild target="{hPanel1}" />
			<mx:AddChild relativeTo="{vMainContainer}" target="{hPanel1}"/>
			<mx:RemoveChild target="{hPanel2}" />
			<mx:AddChild relativeTo="{vMainContainer}" target="{hPanel2}"/>
			<mx:RemoveChild target="{deleteImgBtn}" />
			<mx:RemoveChild target="{changeImgBtn}" />
			<mx:RemoveChild target="{proceedInput}" />
		</mx:State>
		<mx:State name="vertical2">
			<mx:RemoveChild target="{hMainContainer}" />
			<mx:RemoveChild target="{vMainContainer}" />
			<mx:AddChild relativeTo="{mainHBox}" target="{vMainContainer}"/>
			<mx:RemoveChild target="{qField}" />
			<mx:AddChild relativeTo="{hPanel2}" target="{qField}"/>
			<mx:RemoveChild target="{addImageButton}" />
			<mx:RemoveChild target="{nodeImgHolder}" />
			<mx:AddChild relativeTo="{hPanel1}" target="{nodeImgHolder}"/>
			<mx:RemoveChild target="{hPanel1}" />
			<mx:AddChild relativeTo="{vMainContainer}" target="{hPanel1}"/>
			<mx:RemoveChild target="{hPanel2}" />
			<mx:AddChild relativeTo="{vMainContainer}" target="{hPanel2}"/>
			<mx:RemoveChild target="{deleteImgBtn}" />
			<mx:RemoveChild target="{changeImgBtn}" />
			<mx:RemoveChild target="{proceedInput}" />
		</mx:State>
	</screens:states>
	<components:AdventureButton id="doneButton" bottom="20" right="20" label="Done" click="{hide();}" />
</screens:AdventurePopupBase>