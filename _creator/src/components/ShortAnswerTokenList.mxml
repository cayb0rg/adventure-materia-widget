<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		   creationComplete="{onCreationComplete()}"
		   mouseDownOutside="{onMouseDownOutside(event)}"
		   mouseEnabled="true"
		   tabEnabled="true"
		   width="300"
		   backgroundColor="#dfdfdf"
		   paddingTop="5"
		   paddingLeft="10"
		   paddingRight="5"
		   paddingBottom="10"
		   visible="false"
		   borderStyle="solid"
		   borderThickness="1"
		   borderColor="#c7c7c7"
		   cornerRadius="5"
		   dropShadowEnabled="true"
		   horizontalScrollPolicy="off"
		   horizontalAlign="center"
		   >
	<mx:Script> <![CDATA[

		import mx.core.UIComponent;
		import com.adobe.utils.StringUtil;

		[Bindable]
		private var DEFAULT_HEIGHT:Number = 30;
		private var TEXTFORMAT_DEFAULT:TextFormat = new TextFormat("Arial", 0xFFFFFF, 14, 0);

		public var DEFAULT_TEXT:String = "Click this row to add new possible answers";

		// Used to escape commas that don't delineate tokens
		private var ESCAPED_CHARS:String = ",";

		private var tokenList:Array;
		private var tokenStringList:Array;

		private var tokenString:String = "";

		private var creationComplete:Boolean = false;

		private var refPoint:Point;

		public function get answers():String
		{
			return tokenString;
		}

		public function set answers(val:String):void
		{
			tokenString = val;
		}
		public function get referencePoint():Point
		{
			return refPoint;
		}

		public function set referencePoint(pt:Point):void
		{
			refPoint = pt;
			updatePosition();
		}

		private function onCreationComplete():void
		{
			inputBox.restrict = "^\u0001-\u0008\u000B-\u001F";

			tokenList = new Array();
			tokenStringList = new Array();
			creationComplete = true;

			build();
		}

		private function onMouseDownOutside(e:Event):void
		{
			destroy();
		}

		public function updatePosition():void
		{
			if (refPoint == null) return

			// x position doesn't change
			this.x = refPoint.x;

			var bottomPt:Number = refPoint.y + this.height;
			var overflow:Number = 0;
			var yThreshold:Number = parent.height - DEFAULT_HEIGHT - 6;

			if (bottomPt >= yThreshold) // if the bottom of the list exceeds the bottom of the creator window
			{
				overflow = bottomPt - yThreshold;
			}

			else if (this.y != refPoint.y && this.y != 0) // otherwise, adjust the starting Y position of the window
			{
				overflow = -(bottomPt - yThreshold);
			}

			this.y = refPoint.y - overflow;

			if ((this.y - DEFAULT_HEIGHT - 6) < 0)
			{
				inputBox.enabled = false;
				inputBox.selectable = false;
				this.y = 0;
				stage.focus = null;
			}
			else
			{
				inputBox.enabled = true;
				inputBox.selectable = true;
			}
		}

		public function build():void
		{
			if (tokenString.length)
			{
				tokenStringList = splitCommas(tokenString);
			}

			for (var i:int = 0; i < tokenStringList.length; i++)
			{
				tokenStringList[i] = StringUtil.trim(tokenStringList[i]);
				// Parse escaped characters?
				addToken(tokenStringList[i]);
			}

			toggleListeners(true);
		}

		public function toggleListeners(toggle:Boolean):void
		{
			if (toggle)
			{
				inputBox.addEventListener(KeyboardEvent.KEY_UP, onKeyUp);
			}
			else
			{
				inputBox.removeEventListener(KeyboardEvent.KEY_UP, onKeyUp);
			}
		}

		private function splitCommas(target:String):Array
		{
			target = target.split("\n").join("");
			return target.split(new RegExp("(?<!\\\\),"));
		}

		public function destroy():void
		{
			toggleListeners(false);
			PopUpManager.removePopUp(this);
			this.visible = false;
		}

		private function addToken(tokenStr:String = null):void
		{
			var newTokenText:String;

			if (tokenStr != null)
			{
				newTokenText = tokenStr;
			}
			else
			{
				newTokenText = inputBox.text;
				inputBox.text = "";
			}

			newTokenText = newTokenText.replace(/^[\r\n]+/,'');
			newTokenText = StringUtil.trim(newTokenText);

			// check for duplicates?

			if (!newTokenText.length) return;
			if (tokenStr == null) tokenStringList.push(newTokenText);

			var newTokenBox:ShortAnswerTokenRow = new ShortAnswerTokenRow();
			newTokenBox.text = newTokenText;

			newTokenBox.addEventListener(ShortAnswerTokenRow.CLOSE_BUTTON_CLICKED, onTokenClick, false, 0, true);

			this.addChild(newTokenBox);

			// calculateOverflow();
			updatePosition();

			tokenList.push(newTokenBox);

			saveTokenRows();
		}

		private function calculateOverflow():void
		{
			var bottomPt:Point = parent.globalToLocal(this.localToGlobal(new Point(0,this.height)));
			var overflow:Number = 0;

			if (bottomPt.y > parent.height)
			{
				overflow = bottomPt.y - parent.height;
			}

			this.y -= overflow;
		}

		private function saveTokenRows():void
		{
			var r:RegExp = new RegExp(/[^a-zA-Z 0-9\-]+/g);
			for (var i:int = 0; i < tokenStringList.length; i++)
			{
				tokenStringList[i] = tokenStringList[i].replace(r, '');
			}

			tokenString = tokenStringList.join(", ");

			if (!tokenStringList.length) tokenString = DEFAULT_TEXT;

			dispatchEvent(new Event(Event.CHANGE));
		}

		// Not sure which characters this actually escapes
		private function escapeChars(target:String):String
		{
			var result:String = target;
			// escape the the desired characters
			for(var i:int = 0; i < ESCAPED_CHARS.length; i++)
			{
				var regex:RegExp = new RegExp(ESCAPED_CHARS.charAt(i), '\g');
				result = result.replace(regex, "\\" + ESCAPED_CHARS.charAt(i));
			}
			return result;
		}

		private function onKeyUp(e:KeyboardEvent):void
		{
			switch(e.keyCode)
			{
				case Keyboard.ENTER:
					// add the token
					addToken();
					break;
			}
		}

		private function onTokenSubmit():void
		{
			addToken();
		}

		private function onTokenClick(e:Event):void
		{
			// remove click listener
			e.target.removeEventListener(ShortAnswerTokenRow.CLOSE_BUTTON_CLICKED, onTokenClick);

			// rebuild token string array
			var tempTokenStringList:Array = tokenStringList.slice();
			tokenStringList.length = 0;

			for (var i:int = 0; i<tempTokenStringList.length; i++)
			{
				if (tempTokenStringList[i].toLowerCase() != e.target.text.toLowerCase())
				{
					tokenStringList.push(tempTokenStringList[i]);

				}
			}

			tempTokenStringList = null;

			// save new token list and dispatch event to rewrite token string
			saveTokenRows();

			// remove token
			var index:Number = this.getChildIndex(e.target as ShortAnswerTokenRow);

			this.removeChildAt(index);

			updatePosition();
		}

	]]>
	</mx:Script>
	<mx:Metadata>
		[Event(name="change", type="flash.events.Event")]
	</mx:Metadata>
	<mx:Label text="Enter possible answers, one per line:" />
	<mx:HBox width="100%" horizontalGap="5">
		<mx:TextArea id="inputBox" width="235" height="{DEFAULT_HEIGHT}" />
		<mx:Button id="enterInput" width="37" height="30" fillColors="[0x759AB4,0x63839A]" color="0xFFFFFF" icon="@Embed('../assets/continue.png')" click="onTokenSubmit()" />
	</mx:HBox>
	<mx:HRule width="95%" strokeColor="0xACACAC" />
</mx:VBox>